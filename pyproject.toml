[tool.poetry]
name = "phd-model-evaluations"
version = "0.0.1"
description = "Model evaluation library support intrinsic and extrinsic evaluation"
authors = ["Karol Kaczmarek <kaczla@gmail.com>"]
maintainers = ["Karol Kaczmarek <kaczla@gmail.com>"]
readme = "README.md"
license = "MIT"
keywords = [
    "language-model",
    "intrinsic-evaluation",
    "extrinsic-evaluation",
    "LM-GAP",
]
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{ include = "phd_model_evaluations" }]
include = ["CHANGELOG.md"]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = ">=1.10,<1.11"
regex = ">=2023.6.3,<2024"
tqdm = ">=4.64,<5.0"

torch = ">=2.0"
numpy = ">=1.25,<1.26"

transformers = { version = ">=4.33,<4.34", "extras" = ["torch"] }
accelerate = ">=0.23,<0.24"
tokenizers = ">=0.13,<0.14"
sentencepiece = ">=0.1.97,<0.2"
sacremoses = ">=0.0.53,<0.1"
datasets = ">=2.14,<2.15"
evaluate = ">=0.4,<0.5"
scikit-learn = ">=1.3,<1.4"
protobuf = ">=4.21,<5.0"

seaborn = ">=0.12,<1.0"

[tool.poetry.group.dev.dependencies]
python = "^3.11"
black = ">=23.1,<24.0"
isort = ">=5.12,<6.0"

flake8 = ">=6.0,<7.0"
flake8-2020 = ">=1.7,<2.0"
flake8-absolute-import = ">=1.0,<2.0"
flake8-bandit = ">=4.1,<5.0"
flake8-black = ">=0.3.5,<1.0"
flake8-builtins = ">=2.0,<3.0"
flake8-bugbear = ">=23.1,<24.0"
flake8-isort = ">=6.0,<7.0"
flake8-pytest-style = ">=1.6,<2.0"
flake8-simplify = ">=0.19,<1.0"
flake8-use-fstring = ">=1.4,<2.0"
pep8-naming = ">=0.13,<1.0"
ruff = ">=0.0.275,<0.1"

mypy = ">=1.3.0,<1.4.0"
types-regex = ">=2022.10.31,<2022.11"
types-tqdm = ">=4.64,<5.0"

pytest = ">=7.2,<7.3"
pytest-cov = ">=4.0,<5.0"

coverage = { "version" = ">=6.5,<7.0", "extras" = ["toml"] }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = ["E", "F", "W", "I", "N", "YTT", "ANN", "S", "BLE", "B", "A", "EXE", "INP", "PIE", "T20", "PT", "Q", "SIM", "ARG", "PTH", "PGH", "RUF"]
ignore = ["ANN101", "ANN401", "S101", "SIM118", "RUF005"]
line-length = 120

[tool.ruff.per-file-ignores]
"phd_model_evaluations/evaluation/lm_gap/mlm_loss.py" = ["S105"]
"phd_model_evaluations/utils/prediction_utils.py" = ["S106"]
"tests/*" = ["D101", "D102", "D103", "D106", "S105", "S106"]

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "classproperty", "pydantic.validator", "pydantic.root_validator"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pycodestyle]
max-doc-length = 120

[tool.ruff.pydocstyle]
convention = "google"

[tool.coverage.run]
branch = true
source_pkgs = ["phd_model_evaluations"]
relative_files = true

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc.)?abstractmethod",
]
omit = []
ignore_errors = true
skip_covered = true
show_missing = true
precision = 2

[tool.black]
line-length = 120
skip-string-normalization = false

[tool.isort]
atomic = true
profile = "black"
line_length = 120
lines_before_imports = 1
multi_line_output = 3

[tool.mypy]
platform = "linux"
ignore_missing_imports = true
show_column_numbers = true
show_error_context = false
show_error_codes = true
follow_imports = "normal"
warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
warn_unused_configs = true
# More type restrictions:
no_implicit_optional = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
